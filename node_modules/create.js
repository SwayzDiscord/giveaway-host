module.exports.run = async (client, message) => { const Discord = require("discord.js"); const ms = require("ms"); const prefix = client.config.prefix const currentGiveaways = client.giveawaysManager.giveaways.filter( g => g.guildID === message.guild.id && !g.ended ).length; let time = ""; let winnersCount; let prize = ""; let channel = ""; let embed = new Discord.MessageEmbed() .setTitle("Create A Giveaway!") .setColor("#406da2") .setFooter(client.user.username, client.user.displayAvatarURL()) .setTimestamp(); const msg = await message.channel.send( embed.setDescription( "In which channel would you like the giveaway to start in?\nPlease tag the channel or provide it's ID.\n **Must Reply within 30 seconds!**" ) ) let xembed = new Discord.MessageEmbed() .setTitle("Oops! Looks Like We Met A Timeout! ðŸ•–") .setColor("#FF0000") .setDescription('ðŸ’¥ Snap our luck!\nYou took too much time to decide!\nUse ``create`` again to start a new giveaway!\nTry to respond within **30 seconds** this time!') .setFooter(client.user.username, client.user.displayAvatarURL()) .setTimestamp() const filter = m => m.author.id === message.author.id && !m.author.bot const collector = await message.channel.createMessageCollector(filter, { max: 3, time: 30000 }) collector.on("collect", async collect => { const response = collect.content let chn = collect.mentions.channels.first() || message.guild.channels.cache.get(response) await collect.delete() if (!chn) { return msg.edit( embed.setDescription( "Uh-Oh! Looks like you provided an Invalid channel!\n**Try Again?**\n Example: ``#giveaways``, ``677813783523098627``" ) ) } else { channel = chn collector.stop( msg.edit( embed.setDescription( `Alright! Next, How long do you want me to host the giveaway in ${channel} for? \n** Must Reply within 30 seconds!**` ) ) ); } const collector2 = await message.channel.createMessageCollector(filter, { max: 3, time: 30000 }); collector2.on("collect", async collect2 => { let mss = ms(collect2.content); await collect2.delete() if (!mss) { return msg.edit( embed.setDescription( "Aw Snap! Looks Like You Provided Me With An Invalid Duration\n**Try Again?**\n Example: ``10 minutes``,``10m``,``10``" ) ); } else { time = mss; collector2.stop( msg.edit( embed.setDescription( `Alright! Next, How may winners should I roll for the giveaway?\n**Must Reply within 30 seconds.**` ) ) ); } const collector3 = await message.channel.createMessageCollector(filter, { max: 3, time: 30000, errors: ['time'] }); collector3.on("collect", async collect3 => { const response3 = collect3.content.toLowerCase() await collect3.delete() if (parseInt(response3) < 1 || isNaN(parseInt(response3))) { return msg.edit( embed.setDescription( "Boi! Winners Must Be A Number or greater than equal to one!\n**Try Again?**\n Example ``1``,``10``, etcetra." ) ); } else { winnersCount = parseInt(response3); collector3.stop( msg.edit( embed.setDescription(
